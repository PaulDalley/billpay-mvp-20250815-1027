"use client";
import { useEffect, useState } from "react";

type Profile = { connected: boolean; profile?: { displayName?: string; userPrincipalName?: string; mail?: string } };
type InboxItem = { id: string; subject: string; from: string; received: string; hasAttachments: boolean; webLink: string; score?: number };
type Property = { id: string; label: string; address?: string | null };
type Summary = { property: Record<string, { property: Property; bills: any[] }>; personal: any[]; tax: any[]; unclassified: any[] };

export default function Home() {
  const [prof, setProf] = useState<Profile | null>(null);
  const [sb, setSb] = useState<string>("");
  const [inbox, setInbox] = useState<InboxItem[]>([]);
  const [loadingInbox, setLoadingInbox] = useState(false);
  const [loadingBills, setLoadingBills] = useState(false);
  const [props, setProps] = useState<Property[]>([]);
  const [newProp, setNewProp] = useState({ label: "", address: "" });
  const [summary, setSummary] = useState<Summary | null>(null);

  const loadProfile = async () => {
    const r = await fetch("/api/ms/me", { cache: "no-store" });
    if (r.ok) setProf(await r.json());
    else setProf({ connected: false });
  };
  const loadProps = async () => {
    const r = await fetch("/api/properties", { cache: "no-store" });
    if (r.ok) {
      const j = await r.json();
      setProps(j.items || []);
    }
  };
  const loadSummary = async () => {
    const r = await fetch("/api/bills/summary", { cache: "no-store" });
    if (r.ok) {
      const j = await r.json();
      setSummary(j.summary);
    }
  };

  useEffect(() => { loadProfile(); loadProps(); loadSummary(); }, []);

  const connect = () => { window.location.href = "/api/ms/connect"; };
  const signout = async () => { await fetch("/api/ms/signout", { method: "POST" }); setProf({ connected: false }); };
  const checkSupabase = async () => { const r = await fetch("/api/health/supabase", { cache: "no-store" }); setSb(await r.text()); };

  const refreshInbox = async () => {
    setLoadingInbox(true);
    try {
      const r = await fetch("/api/inbox?top=10", { cache: "no-store" });
      const j = await r.json(); setInbox(j.items || []);
      await loadSummary();
    } finally { setLoadingInbox(false); }
  };
  const findBills = async () => {
    setLoadingBills(true);
    try {
      const r = await fetch("/api/inbox/bills?top=30", { cache: "no-store" });
      await r.json(); await loadSummary();
    } finally { setLoadingBills(false); }
  };

  const addProperty = async (e: any) => {
    e.preventDefault();
    const body = { label: newProp.label || "Property", address: newProp.address || null };
    await fetch("/api/properties", { method: "POST", headers: { "Content-Type": "application/json" }, body: JSON.stringify(body) });
    setNewProp({ label: "", address: "" });
    await loadProps(); await loadSummary();
  };

  const label = prof?.connected ?  : "Not connected";

  return (
    <main className="min-h-screen bg-gray-50 p-6 flex items-center justify-center">
      <div className="w-full max-w-5xl bg-white shadow-xl rounded-2xl p-8 space-y-6">
        <h1 className="text-4xl font-bold text-blue-600 text-center">Bill Concierge MVP</h1>
        <p className="text-gray-600 text-center">Organize bills by <b>property</b>, plus <b>personal</b> & <b>tax</b>. Data persists so you can pick up where you left off.</p>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="rounded-xl border p-5 space-y-3">
            <h2 className="font-semibold text-lg">Microsoft</h2>
            <p className="text-sm text-gray-600">{label}</p>
            <div className="flex flex-wrap gap-3">
              {!prof?.connected ? (
                <button onClick={connect} className="flex-1 bg-blue-600 hover:bg-blue-700 text-white font-semibold py-2.5 rounded-lg">Connect</button>
              ) : (
                <>
                  <button onClick={refreshInbox} className="flex-1 bg-purple-600 hover:bg-purple-700 text-white font-semibold py-2.5 rounded-lg" disabled={loadingInbox}>
                    {loadingInbox ? "Loading…" : "Refresh Inbox"}
                  </button>
                  <button onClick={findBills} className="flex-1 bg-amber-600 hover:bg-amber-700 text-white font-semibold py-2.5 rounded-lg" disabled={loadingBills}>
                    {loadingBills ? "Finding…" : "Find Bills"}
                  </button>
                  <button onClick={signout} className="bg-gray-200 hover:bg-gray-300 text-gray-800 font-semibold py-2.5 px-4 rounded-lg">Sign out</button>
                </>
              )}
            </div>
          </div>

          <div className="rounded-xl border p-5 space-y-3">
            <h2 className="font-semibold text-lg">Supabase Health</h2>
            <button onClick={checkSupabase} className="bg-green-600 hover:bg-green-700 text-white font-semibold py-2.5 px-4 rounded-lg">Check</button>
            {sb && <pre className="text-xs bg-gray-50 p-3 rounded-lg overflow-auto max-h-48 whitespace-pre-wrap">{sb}</pre>}
          </div>
        </div>

        <div className="rounded-xl border p-5">
          <h2 className="font-semibold text-lg mb-3">Properties</h2>
          <form onSubmit={addProperty} className="flex flex-col md:flex-row gap-2 mb-3">
            <input className="border rounded-lg px-3 py-2 flex-1" placeholder="Label (e.g., 12 Example St)" value={newProp.label} onChange={e=>setNewProp(p=>({...p, label: e.target.value}))} />
            <input className="border rounded-lg px-3 py-2 flex-1" placeholder="Address (optional)" value={newProp.address} onChange={e=>setNewProp(p=>({...p, address: e.target.value}))} />
            <button className="bg-blue-600 hover:bg-blue-700 text-white font-semibold px-4 py-2 rounded-lg">Add</button>
          </form>
          {props.length === 0 ? (
            <p className="text-sm text-gray-500">No properties yet. Add one so property bills can auto-assign.</p>
          ) : (
            <ul className="grid grid-cols-1 md:grid-cols-2 gap-3">
              {props.map(p => (
                <li key={p.id} className="border rounded-lg p-3">
                  <div className="font-medium">{p.label}</div>
                  {p.address && <div className="text-xs text-gray-500">{p.address}</div>}
                </li>
              ))}
            </ul>
          )}
        </div>

        <div className="rounded-xl border p-5">
          <h2 className="font-semibold text-lg mb-3">Bills Summary</h2>
          {!summary ? (
            <p className="text-sm text-gray-500">Click <b>Find Bills</b> to populate.</p>
          ) : (
            <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
              <div className="border rounded-lg p-3">
                <div className="font-medium mb-1">Personal</div>
                <div className="text-sm text-gray-600">{summary.personal.length} items</div>
              </div>
              <div className="border rounded-lg p-3">
                <div className="font-medium mb-1">Tax</div>
                <div className="text-sm text-gray-600">{summary.tax.length} items</div>
              </div>
              <div className="border rounded-lg p-3">
                <div className="font-medium mb-1">Unclassified</div>
                <div className="text-sm text-gray-600">{summary.unclassified.length} items</div>
              </div>
            </div>
          )}
          {summary && Object.keys(summary.property).length > 0 && (
            <div className="mt-4">
              <div className="font-semibold mb-2">By Property</div>
              <ul className="grid grid-cols-1 md:grid-cols-2 gap-3">
                {Object.values(summary.property).map((b: any) => (
                  <li key={b.property.id} className="border rounded-lg p-3">
                    <div className="font-medium">{b.property.label}</div>
                    <div className="text-sm text-gray-600">{b.bills.length} items</div>
                  </li>
                ))}
              </ul>
            </div>
          )}
        </div>

        <div className="rounded-xl border p-5">
          <h2 className="font-semibold text-lg mb-3">Latest Messages (raw)</h2>
          {inbox.length === 0 ? (
            <p className="text-sm text-gray-500">No messages loaded. Click <b>Refresh Inbox</b>.</p>
          ) : (
            <ul className="divide-y">
              {inbox.map(m => (
                <li key={m.id} className="py-3 flex items-start justify-between gap-4">
                  <div>
                    <div className="font-medium">{m.subject || "(no subject)"}</div>
                    <div className="text-xs text-gray-500">{m.from} • {new Date(m.received).toLocaleString()}</div>
                    {m.hasAttachments && <span className="mt-1 inline-block text-[10px] px-2 py-0.5 bg-yellow-100 text-yellow-800 rounded">Attachments</span>}
                  </div>
                  <a className="text-sm text-blue-600 hover:underline" href={m.webLink} target="_blank" rel="noreferrer">Open</a>
                </li>
              ))}
            </ul>
          )}
        </div>

        <p className="text-xs text-gray-500 text-center">Signed-in state persists locally. Add a property, then click <b>Find Bills</b> to auto-assign where possible.</p>
      </div>
    </main>
  );
}
